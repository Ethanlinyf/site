#+SETUPFILE: ../theme-rose.setup
#+DATE: <2020-07-31 Fri 09:19>
#+TITLE: Assembly

#+BEGIN_QUOTE
好记性不如烂笔头系列……
#+END_QUOTE

** 汇编语言基本概念简介

汇编语言是一种最低级、最古老、不具有移植性的编程语言，它能够直接访问计算机硬件，所以执行效率极高，占用资源极少，一般用于嵌入式设备、驱动程序、实时应用、核心算法等。本文内容基于 Windows 32/64 位系统，讲解与 Intel 和 AMD 处理器相兼容的汇编语言程序设计，让大家认识机器的思维。

*** 汇编语言是什么

学习汇编，可能会遇到的若干问题。

_1. 什么是汇编器和链接器_

_汇编器_ （assmbler）是一种工具程序，用于将汇编语言程序转换为机器语言。 _链接器_ （linker）也是一种工具程序，它把汇编器生成的单个文件组合为一个可执行程序。还有一个相关的工具，称为 _调试器_ （debugger），使程序员可以在程序运行时，单步执行程序并检查寄存器和内存状态。

_2. 汇编语言和机器语言有什么关系_

机器语言（machine language）是一种数学语言，专门设计成能被计算机（CPU）理解。所有的 X86 处理器都理解共同的机器语言。

汇编语言（assembly language）包含用短助记符如 =ADD、MOV、SUB= 和 =CALL= 书写的语句。汇编语言与机器语言是 *一对一* （one-to-one）的关系：每一条汇编语言指令对应一条机器语言指令。

_3. 汇编语言与高级语言的关系_

高级语言如 Java 、C++ 和 Python 等与汇编语言和机器语言是 *一对多* （one-to-many）的关系，如 C++ 的一条语句就会被扩展为多条汇编指令或机器指令。如：

#+BEGIN_SRC cpp -n
  int Y;
  int X = (Y + 4) * 3;
#+END_SRC

↓ ↓ ↓

#+BEGIN_EXPORT html
<note>
寄存器（register）是 CPU 中被命名的存储位置，用于保存操作的中间结果。
</note>
#+END_EXPORT

#+BEGIN_SRC asm -n
          mov eax, Y              ; Y 送入 EAX 寄存器
          add eax, 4              ; EAX 寄存器内容加 4
          mov ebx, 3              ; 3 送入 EAX 寄存器
          imul ebx                ; EAX 与 EBX 相乘
          mov x, eax              ; EAX 的值送入 X
#+END_SRC

_4. 为什么要学习汇编语言_

……你说呢？

_5. 汇编语言的规则吗_

#+BEGIN_EXPORT html
<note>
一种语言，如果它的源程序能够在各种各样的计算机系统中进行编译和运行，那么这种语言被称为是可移植的（portable）。
</note>
#+END_EXPORT

汇编语言是不可移植的，它是为特定处理器系列设计的。大多数汇编语言规则都是以目标处理器及其机器语言的物理局限性为基础的。比如，CPU 要求两个指令操作数的大小相同。与 C++ 或 Java 相比，汇编语言的规则较少，因为前者是用语法规则来减少意外的逻辑错误，而这是以限制底层数据访问为代价的。

汇编程序员可以很容易的绕过高级语言的限制性特征，如 Java 就不允许访问特定的内存地址。程序员可以使用 JNI（Java Native Interface）类来调用 C 函数绕过这个限制，结果就是程序不容易维护。反之，汇编语言可以访问所有的内存地址，但同样了需要花费大量的时间进行调试。

C 和 C++ 语言具有一个独特的特性，能够在高级结构和底层细节之间进行平衡。直接访问硬件是可能的，但是完全不可移植。大多数 C 和 C++ 编译器都允许在其代码是嵌入汇编语言，以提供对硬件细节的访问。

*** 虚拟机是什么

虚拟机概念（virtual machine）是一种说明计算机硬件和软件关系的有效方法。

计算机通常可以执行用其原生机器语言编写的程序，这种语言中的每一条指令都简单到可以用相对少量的电子电路来执行。为了简便，称这种语言为 L0。

由于 L0 极其详细，并且只有数字组成，因此，程序员用其编写程序就非常困难。如果能够构造一种较易使用的新语言 L1，那么就可以用 L1 编写程序。在两种实现方法：
- 解释（Interpretation）：运行 L1 程序时，它的每一条指令都由一个用 L0 语言编写的程序进行译码和执行。L1 程序可以立即开始运行，但是在执行之前，必须对每条指令进行译码。
- 翻译（Translation）：由一个专门设计的 L0 程序将整个 L1 程序转换为 L0 程序。然后，得到的 L0 程序就可以在计算机硬件上执行。

与只使用语言描述相比，把每一层都想象成有一台假设的计算机或虚拟机会更容易一些。通俗地说，虚拟机可以定义为一个软件程序，用来模拟一些其他的物理或虚拟计算机的功能。

#+BEGIN_EXPORT html
<img
src="http://c.biancheng.net/uploads/allimg/190425/4-1Z425134433222.gif"
width="16%"
style="float: left; margin-right: 10px;"
/>
#+END_EXPORT

#+BEGIN_EXPORT html
<note>
机器 VM1 与 VM0 之间的差异不能太大，否则，翻译或解释花费的时间就会非常多。
</note>
#+END_EXPORT

虚拟机，将其称为 VM1，可以执行 L1 语言编写的指令，虚拟机 VM0 可以执行 L0 语言编写的指令。每一个虚拟机既可以用硬件构成，也可以用软件构成。程序员可以为虚拟机 VM1 编写程序，如果能把 VM1 当作真实计算机予以实现，那么，程序就能够直接在这个硬件上执行。否则，用 VM1 写出的程序就被翻译/解释为 VM0 程序，并在机器上执行。

如果 VM1 语言对程序员来说还不够友好到足以用于应用程序开发呢？

#+BEGIN_EXPORT html
<note>
Java 编程语言就是以虚拟机概念为基础的，Java 编译器把用 Java 语言编写的程序翻译为 Java 字节码（Java byte code）。后者是一种低级语言，能够在运行是由 Java 虚拟机（JVM）程序快速执行。JVM 已经在许多不同的计算机系统上实现了，这使得 Java 程序相对而言独立于系统。
</note>
#+END_EXPORT

可以为此设计另一个更加易于理解的虚拟机 VM2 。这个过程能够不断重复，直到虚拟机 VMn 足够支持功能强大、使用方便的语言。

_#. 特定的机器_

#+BEGIN_EXPORT html
<img
src="http://c.biancheng.net/uploads/allimg/190425/4-1Z425134501N0.gif"
width="20%"
style="float: right;"
/>
#+END_EXPORT

计算机数字逻辑硬件表示为 Level1 机器，其上是 Level2，称为指令集架构（ISA, Instruction Set Architecture），是计算机芯片制造商在处理器内部设计一个指令集来实现基本操作，如传送、加法或乘法。通常这是用户可以编程的第一个层次，尽管这种程序包含的是二进制数值的机器语言。每一个机器语言指令或者直接在存机器硬件上执行，或者由嵌入到微处理器芯片的程序来执行，该程序被称为微程序。

汇编语言（Level3）在 ISA 层，编程语言提供了一个翻译层，来实践大规模软件开发。它使用短助记符，如 ADD、SUB 和 MOV，易于转换到 ISA 层。汇编语言程序在执行之前要全部翻译（汇编）为机器语言。

高级语言（Level4）是高级编程语言，如 C、C++ 和 Java。这些语言程序所包含的语句功能强大，并翻译为多条汇编语言指令。既而，汇编语言代码由编译器自动汇编为机器语言。

*** 汇编语言的数据表示

